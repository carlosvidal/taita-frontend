---
import BlogLayout from '../layouts/BlogLayout.astro';
import { getTenantInfo, fetchTenantData } from '../utils/tenant.js';

// Configuración para renderizado en el servidor
export const prerender = false;

// Obtener información del tenant desde la petición
const tenantInfo = getTenantInfo(Astro.request);

// Definir tipos para mejorar el tipado
interface Post {
  id: number;
  title: string;
  content: string;
  excerpt?: string;
  createdAt: string;
  updatedAt?: string;
  publishedAt?: string;
  slug?: string;
  image?: string;
  category?: {
    id: number;
    name: string;
    slug: string;
  };
}

interface MenuItem {
  id?: number;
  uuid?: string;
  label?: string;
  url?: string;
  order?: number;
  parentId?: number | null;
}

interface Category {
  id: number;
  name: string;
  slug: string;
}

interface Settings {
  title?: string;
  description?: string;
  blogTitle?: string;
}

interface MenuItemForLayout {
  label: string;
  url: string;
  active: boolean;
}

// Fetch data using tenant information
let posts: Post[] = [];
let menuItems: MenuItem[] = [];
let categories: Category[] = [];
let settingsData: Settings = {};
let mappedMenuItems: MenuItemForLayout[] = [];

try {
  // Fetch posts, menu, settings, and categories in parallel
  const [postsData, menuData, settingsResponse, categoriesData] = await Promise.all([
    fetchTenantData('/posts/public', tenantInfo),
    fetchTenantData('/menu/public', tenantInfo),
    fetchTenantData('/settings/public', tenantInfo),
    fetchTenantData('/categories/public', tenantInfo)
  ]);
  
  // Debug raw API responses
  console.log('Tenant Info:', tenantInfo);
  console.log('Posts:', postsData);
  console.log('Menu:', menuData);
  console.log('Settings:', settingsResponse);
  console.log('Categories:', categoriesData);
  
  // Process responses
  if (postsData && Array.isArray(postsData)) {
    posts = postsData;
  }
  
  if (menuData && Array.isArray(menuData)) {
    menuItems = menuData;
    // Mapear los elementos del menú al formato esperado por BlogLayout
    mappedMenuItems = menuItems.map((item): MenuItemForLayout => ({
      label: item.label || item.title || item.name || 'Link',
      url: item.url || `/${item.slug || ''}`,
      active: item.url === '/' || false
    }));
  }
  
  if (settingsResponse) {
    settingsData = settingsResponse;
  }
  
  if (categoriesData && Array.isArray(categoriesData)) {
    categories = categoriesData;
  } else if (categoriesData?.categories && Array.isArray(categoriesData.categories)) {
    categories = categoriesData.categories;
  }
  
} catch (error) {
  console.error('API Error:', error);
}

// Add fallback menu items if API fails
if (mappedMenuItems.length === 0) {
  mappedMenuItems = [
    { label: 'Inicio', url: '/', active: true },
    { label: 'Blog', url: '/blog', active: false },
    { label: 'Acerca', url: '/about', active: false }
  ];
}

if (categories.length === 0) {
  categories = [
    { id: 1, name: 'Tecnología', slug: 'tech' },
    { id: 2, name: 'Diseño', slug: 'design' }
  ];
}

// Helper function to format dates
function formatDate(dateString: string): string {
  if (!dateString) return '';
  
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  } catch (e) {
    return '';
  }
}
---

<BlogLayout 
  title={settingsData?.title || 'Mi Blog'}
  description={settingsData?.description || '... a minimalistic theme focused on readability.'}
  blogTitle={settingsData?.blogTitle || settingsData?.title || 'Read'}
  menuItems={mappedMenuItems}
  settings={settingsData}
>
  <div class="content-wrapper">
    {categories.length > 0 && (
      <section class="categories-section">
        <h2>Categorías</h2>
        <ul class="categories-list">
          {categories.map(category => (
            <li>
              <a href={`/category/${category.slug}`}>{category.name}</a>
            </li>
          ))}
        </ul>
      </section>
    )}

    <div class="posts-container">
      {posts.length > 0 ? (
        <div>
          {posts.map(post => (
            <article class="post">
              <header class="post-header">
                <h2 class="post-title">
                  <a href={`/blog/${post.slug || post.id}`}>{post.title}</a>
                </h2>
                <div class="post-meta">
                  {post.publishedAt && (
                    <time datetime={post.publishedAt}>
                      {formatDate(post.publishedAt)}
                    </time>
                  )}
                  
                  {post.category && (
                    <span class="post-categories">
                      <a href={`/category/${post.category.slug}`}>
                        {post.category.name}
                      </a>
                    </span>
                  )}
                </div>
              </header>
              
              {post.image && (
                <div class="post-image">
                  <a href={`/blog/${post.slug || post.id}`}>
                    <img src={`${import.meta.env.PUBLIC_IMAGE_BASE_URL}/${post.image}`} alt={post.title} loading="lazy" />
                  </a>
                </div>
              )}
              
              <div class="post-excerpt">
                {post.excerpt || post.content.substring(0, 250) + '...'}
              </div>
              
              <a href={`/blog/${post.slug || post.id}`} class="read-more">Seguir leyendo →</a>
            </article>
          ))}
        </div>
      ) : (
        <div class="no-posts">
          <p>No se encontraron posts. Comienza a crear contenido en tu CMS.</p>
        </div>
      )}
    </div>
  </div>
</BlogLayout>

<style>
  .content-wrapper {
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .categories-section {
    background-color: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    position: sticky;
    top: 2rem;
    align-self: start;
    height: fit-content;
  }

  .categories-section h2 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.5rem;
  }

  .categories-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .categories-list li {
    margin-bottom: 0.8rem;
  }

  .categories-list a {
    text-decoration: none;
    color: #555;
    transition: color 0.2s;
  }

  .categories-list a:hover {
    color: #0066cc;
  }

  .post {
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid #eee;
  }

  .post-title {
    font-size: 1.8rem;
    margin-bottom: 0.5rem;
  }

  .post-title a {
    color: inherit;
    text-decoration: none;
    transition: color 0.2s;
  }

  .post-title a:hover {
    color: #0066cc;
  }

  .post-meta {
    color: #666;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    display: flex;
    gap: 1rem;
  }

  .post-categories a {
    color: #0066cc;
    text-decoration: none;
  }

  .post-categories a:hover {
    text-decoration: underline;
  }

  .post-image {
    margin: 1.5rem 0;
    border-radius: 8px;
    overflow: hidden;
  }
  
  .post-image img {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 0.3s ease;
  }
  
  .post-image:hover img {
    transform: scale(1.02);
  }
  
  .post-excerpt {
    margin-bottom: 1.5rem;
    color: #444;
    line-height: 1.6;
  }

  .read-more {
    display: inline-block;
    color: #0066cc;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s;
  }

  .read-more:hover {
    color: #004c99;
  }

  .no-posts {
    background-color: #f8f9fa;
    padding: 3rem;
    text-align: center;
    border-radius: 8px;
  }

  @media (max-width: 768px) {
    .content-wrapper {
      grid-template-columns: 1fr;
    }
    
    .categories-section {
      position: static;
      margin-bottom: 2rem;
    }
  }
</style>
