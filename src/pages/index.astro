---
import BlogLayout from '../layouts/BlogLayout.astro';

// Configuración para renderizado en el servidor
export const prerender = false;

// API endpoint definitions
// Usar la URL de la API local o la configurada en las variables de entorno
const API_BASE = import.meta.env.PUBLIC_API_URL || 'http://localhost:3000/api';
const POSTS_API = `${API_BASE}/posts/public`; // Endpoint público sin autenticación
const MENU_API = `${API_BASE}/menu/public`;
const CATEGORIES_API = `${API_BASE}/categories/public`;
const SETTINGS_API = `${API_BASE}/settings/public`;

// Helper function to handle API responses
async function fetchAPI(url: string) {
  try {
    // Obtener el host actual para enviarlo en la solicitud
    const host = Astro.request.headers.get('host') || 'localhost:3000';
    
    const res = await fetch(url, {
      headers: {
        'Accept': 'application/json',
        'Host': host
      }
    });
    
    // Debug the response
    const text = await res.text();
    console.log(`Response from ${url} with host ${host}:`, text);
    
    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
    if (text.startsWith('<!DOCTYPE')) throw new Error('Received HTML instead of JSON');
    
    return JSON.parse(text);
  } catch (error) {
    console.error(`Failed to fetch ${url}:`, error);
    return null;
  }
}

// Definir tipos para mejorar el tipado
interface Post {
  id: number;
  title: string;
  content: string;
  excerpt?: string;
  createdAt: string;
  updatedAt?: string;
  publishedAt?: string;
  image?: string;
  category?: {
    id: number;
    name: string;
    slug: string;
  };
}

interface MenuItem {
  id?: number;
  uuid?: string;
  label?: string;
  url?: string;
  order?: number;
  parentId?: number | null;
}

interface Category {
  id: number;
  name: string;
  slug: string;
}

interface Settings {
  title?: string;
  description?: string;
}

interface MenuItemForLayout {
  label: string;
  url: string;
  active: boolean;
}

let posts: Post[] = [];
let menuItems: MenuItem[] = [];
let categories: Category[] = [];
let settingsData: Settings | null = null;
let mappedMenuItems: MenuItemForLayout[] = [];

try {
  const [postsData, menuData, categoriesData, settingsResponse] = await Promise.all([
    fetchAPI(POSTS_API),
    fetchAPI(MENU_API),
    fetchAPI(CATEGORIES_API),
    fetchAPI(SETTINGS_API)
  ]);
  
  // Debug raw API responses
  console.log('Posts:', postsData);
  console.log('Menu:', menuData);
  console.log('Categories:', categoriesData);
  console.log('Settings:', settingsResponse);
  
  // Handle responses
  posts = postsData || [];
  menuItems = menuData || [];
  settingsData = settingsResponse || {};
  
  // Mapear los elementos del menú al formato esperado por BlogLayout
  mappedMenuItems = menuItems.map((item: any): MenuItemForLayout => ({
    label: item.label || item.title || item.name || 'Link',
    url: item.url || `/${item.slug || ''}`,
    active: item.url === '/' || false // No podemos usar window en SSR
  }));
  categories = categoriesData?.categories || categoriesData || [];
  
} catch (error) {
  console.error('API Error:', error);
  // Fallback data remains the same
  menuItems = [
    { label: 'Inicio', url: '/' },
    { label: 'Blog', url: '/blog' },
    { label: 'Acerca', url: '/about' }
  ];
  categories = [
    { id: 1, name: 'Tecnología', slug: 'tech' },
    { id: 2, name: 'Diseño', slug: 'design' }
  ];
}

// Helper function to parse dates safely
function parseDate(dateString: string | undefined): Date | null {
  if (!dateString) return null;
  
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
      return null;
    }
    return date;
  } catch (e) {
    return null;
  }
}

// Add fallback menu items if API fails
if (menuItems.length === 0) {
  // Crear directamente los elementos mapeados para el layout
  mappedMenuItems = [
    { label: 'Home', url: '/', active: true },
    { label: 'Categories', url: '/categories', active: false },
    { label: 'About', url: '/about', active: false },
    { label: 'Contact', url: '/contact', active: false }
  ];
}

if (categories.length === 0) {
  categories = [
    { id: 1, name: 'Technology', slug: 'technology' },
    { id: 2, name: 'Lifestyle', slug: 'lifestyle' },
    { id: 3, name: 'Travel', slug: 'travel' }
  ];
}

---
<BlogLayout 
  title={settingsData?.title || 'Mi Blog'}
  description={settingsData?.description || '... a minimalistic theme focused on readability.'}
  blogTitle={settingsData?.title || 'Read'}
  menuItems={mappedMenuItems}
>
  <div class="content-wrapper">
    {categories.length > 0 && (
      <section class="categories-section">
        <h2>Categorías</h2>
        <ul class="categories-list">
          {categories.map(category => (
            <li>
              <a href={`/category/${category.slug}`}>{category.name}</a>
            </li>
          ))}
        </ul>
      </section>
    )}

    <div class="posts-container">
      {posts.length > 0 ? (
        <div>
          {posts.map(post => (
            <article class="post">
              <header class="post-header">
                <h2 class="post-title"><a href={`/blog/${post.id}`}>{post.title}</a></h2>
                <div class="post-meta">
                  {new Date(post.createdAt).toLocaleDateString('es-ES', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                  
                  {post.category && (
                    <span class="post-categories">
                      <a href={`/category/${post.category.slug}`}>
                        {post.category.name}
                      </a>
                    </span>
                  )}
                </div>
              </header>
              
              {post.image && (
                <div class="post-image">
                  <a href={`/blog/${post.id}`}>
                    <img src={`https://taita-api.onrender.com/${post.image}`} alt={post.title} loading="lazy" />
                  </a>
                </div>
              )}
              
              <div class="post-excerpt">
                {post.excerpt || post.content.substring(0, 250) + '...'}
              </div>
              
              <a href={`/blog/${post.id}`} class="read-more">Seguir leyendo →</a>
            </article>
          ))}
        </div>
      ) : (
        <p>No posts found.</p>
      )}
    </div>
  </div>
</BlogLayout>

<style>
  .categories-sidebar {
    background-color: #f0f0f0;
    padding: 1rem;
    border: 1px solid #ddd;
  }
</style>
<style>
  .content-wrapper {
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: 2rem;
  }

  .categories-sidebar {
    position: sticky;
    top: 2rem;
    align-self: start;
  }

  .categories-sidebar ul {
    list-style: none;
    padding: 0;
    margin: 1rem 0 0;
  }

  .categories-sidebar li {
    margin-bottom: 0.5rem;
  }

  .categories-sidebar a {
    text-decoration: none;
    color: var(--text-secondary);
  }

  .categories-sidebar a:hover {
    color: var(--text-primary);
  }

  .post-image {
    margin: 1.5rem 0;
    border-radius: 8px;
    overflow: hidden;
  }
  
  .post-image img {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 0.3s ease;
  }
  
  .post-image:hover img {
    transform: scale(1.02);
  }
  
  .post-excerpt {
    margin-bottom: 1.5rem;
    font-family: var(--sans-font);
    color: var(--text-color);
    line-height: 1.6;
  }

  @media (max-width: 768px) {
    .content-wrapper {
      grid-template-columns: 1fr;
    }
    
    .categories-sidebar {
      position: static;
      order: -1;
    }
  }
</style>
