---
import BlogLayout from '../layouts/BlogLayout.astro';
import { getTenantInfo, fetchTenantData } from '../utils/tenant.js';
import { api } from '../utils/api.js';

// Configuración para renderizado en el servidor
export const prerender = false;

// Obtener información del tenant desde la petición
const tenantInfo: TenantInfo = getTenantInfo(Astro.request) || {};
console.log('Tenant Info en index.astro:', tenantInfo);

// Definir tipos para mejorar el tipado
interface TenantInfo {
  host?: string;
  subdomain?: string;
  [key: string]: any;
}

interface Post {
  id: number;
  title: string;
  content: string;
  excerpt?: string;
  createdAt: string;
  updatedAt?: string;
  publishedAt?: string;
  slug?: string;
  image?: string;
  category?: {
    id: number;
    name: string;
    slug: string;
  };
}

interface MenuItem {
  id: number;
  uuid: string;
  label: string;
  url: string;
  order: number;
  parentId: number | null;
  children: MenuItem[];
}

interface Category {
  id: number;
  name: string;
  slug: string;
}

interface Settings {
  title: string;
  description: string;
  blogTitle?: string;
  [key: string]: any; // Para propiedades adicionales
}

interface MenuItemForLayout {
  label: string;
  url: string;
  active: boolean;
  children?: MenuItemForLayout[];
}

// Variables para almacenar los datos
let posts: Post[] = [];
let menuItems: MenuItem[] = [];
let categories: Category[] = [];
let settingsData: Settings = {
  title: 'Taita Blog',
  description: 'Un blog moderno construido con Astro',
  blogTitle: 'Taita'
};
let mappedMenuItems: MenuItemForLayout[] = [];
let errorMessages: string[] = [];

try {
  console.log('index.astro - Iniciando fetch de datos usando API Client');
  
  // Usar la instancia de API ya configurada
  const apiClient = api;
  
  // Obtener el host y subdominio
  const host = tenantInfo.host || 'taita.blog';
  const subdomain = tenantInfo.subdomain || 'demo';
  
  console.log('Obteniendo datos para:', { host, subdomain });
  
  // Hacer las peticiones en paralelo como en api-test.astro
  try {
    const [postsData, menuData, settingsResponse, categoriesData] = await Promise.all([
      apiClient.fetch('/posts/public', {
        headers: {
          'Host': host,
          'X-Taita-Subdomain': subdomain,
          'Origin': 'https://taita.blog',
          'Referer': 'https://taita.blog/'
        }
      }),
      apiClient.fetch('/menu/public', {
        headers: {
          'Host': host,
          'X-Taita-Subdomain': subdomain
        }
      }),
      apiClient.fetch('/settings/public', {
        headers: {
          'Host': host,
          'X-Taita-Subdomain': subdomain
        }
      }),
      apiClient.fetch('/categories/public', {
        headers: {
          'Host': host,
          'X-Taita-Subdomain': subdomain
        }
      })
    ]);
    
    // Procesar respuestas
    if (postsData && Array.isArray(postsData)) {
      posts = postsData;
      console.log('Posts cargados:', posts.length);
    } else {
      console.error('Formato de posts inesperado:', postsData);
      errorMessages.push('No se pudieron obtener los posts');
    }
    
    if (menuData && Array.isArray(menuData)) {
      menuItems = menuData;
      console.log('Menú cargado:', menuItems.length, 'elementos');
    } else {
      console.error('Formato de menú inesperado:', menuData);
      errorMessages.push('No se pudo cargar el menú');
    }
    
    if (settingsResponse) {
      settingsData = settingsResponse;
      console.log('Settings cargados:', Object.keys(settingsData).join(', '));
    } else {
      console.error('No se recibieron settings');
      errorMessages.push('No se pudieron cargar los ajustes');
    }
    
    if (categoriesData && Array.isArray(categoriesData)) {
      categories = categoriesData;
      console.log('Categorías cargadas:', categories.length);
    } else if (categoriesData?.categories && Array.isArray(categoriesData.categories)) {
      categories = categoriesData.categories;
      console.log('Categorías cargadas desde categories.categories:', categories.length);
    } else {
      console.error('Formato de categorías inesperado:', categoriesData);
      errorMessages.push('No se pudieron obtener las categorías');
    }
    
    // Mapear los elementos del menú al formato esperado por BlogLayout
    const mapMenuItems = (items: MenuItem[]): MenuItemForLayout[] => {
      return items.map((item): MenuItemForLayout => ({
        label: item.label || 'Link',
        url: item.url || '/',
        active: item.url === '/',
        // Si hay elementos hijos, mapearlos recursivamente
        ...(item.children && item.children.length > 0 && {
          children: mapMenuItems(item.children)
        })
      }));
    };
    
    mappedMenuItems = mapMenuItems(menuItems);
    console.log('Elementos de menú mapeados:', mappedMenuItems.length);
    
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
    console.error('Error al cargar datos:', error);
    errorMessages.push(`Error al cargar datos: ${errorMessage}`);
  }
  
} catch (error: unknown) {
  const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
  console.error('Error al cargar datos:', error);
  errorMessages.push(`Error: ${errorMessage}`);
  
  // Try with legacy method if new method fails
  try {
    console.log('index.astro - Intentando con método legacy');
    
    const [postsData, menuData, settingsResponse, categoriesData] = await Promise.all([
      fetchTenantData('/posts/public', tenantInfo),
      fetchTenantData('/menu/public', tenantInfo),
      fetchTenantData('/settings/public', tenantInfo),
      fetchTenantData('/categories/public', tenantInfo)
    ]);
    
    // Process posts
    if (postsData && Array.isArray(postsData)) {
      posts = postsData;
      console.log('index.astro - Posts procesados (legacy):', posts.length);
    }
    
    // Process menu
    if (menuData && Array.isArray(menuData)) {
      // Mapear los elementos del menú al formato esperado por BlogLayout
      const mapLegacyMenuItems = (items: any[]): MenuItemForLayout[] => {
        return items.map((item): MenuItemForLayout => ({
          label: item.label || 'Link',
          url: item.url || '/',
          active: item.url === '/',
          // Si hay elementos hijos, mapearlos recursivamente
          ...(item.children && item.children.length > 0 && {
            children: mapLegacyMenuItems(item.children)
          })
        }));
      };
      
      menuItems = menuData;
      mappedMenuItems = mapLegacyMenuItems(menuData);
      console.log('Elementos de menú legacy mapeados:', mappedMenuItems.length);
      console.log('index.astro - Menú procesado (legacy):', mappedMenuItems.length);
    }
    
    // Process settings
    if (settingsResponse) {
      // Asegurarse de que settingsResponse cumpla con la interfaz Settings
      const responseData = typeof settingsResponse === 'object' && settingsResponse !== null ? settingsResponse : {};
      const { 
        title = 'Taita Blog',
        description = 'Un blog moderno construido con Astro',
        blogTitle = 'Taita',
        ...rest
      } = responseData as Record<string, any>;
      
      settingsData = {
        title,
        description,
        blogTitle,
        ...rest
      };
      console.log('index.astro - Settings procesados (legacy):', Object.keys(settingsData).join(', '));
    }
    
    // Process categories
    if (categoriesData) {
      const categoriesResponse = categoriesData as Record<string, any>;
      if (Array.isArray(categoriesResponse)) {
        categories = categoriesResponse;
        console.log('index.astro - Categorías procesadas (legacy):', categories.length);
      } else if (Array.isArray(categoriesResponse.categories)) {
        categories = categoriesResponse.categories;
        console.log('index.astro - Categorías procesadas desde categoriesData.categories (legacy):', categories.length);
      }
    }
    
  } catch (legacyError: unknown) {
    const errorMessage = legacyError instanceof Error ? legacyError.message : 'Error desconocido';
    console.error('Legacy API Error:', legacyError);
    errorMessages.push(`Legacy Error: ${errorMessage}`);
  }
}

// Add fallback menu items if API fails
if (mappedMenuItems.length === 0) {
  console.log('index.astro - Usando menú de fallback');
  mappedMenuItems = [
    { label: 'Inicio', url: '/', active: true },
    { label: 'Blog', url: '/blog', active: false },
    { label: 'Acerca', url: '/about', active: false }
  ];
}

if (categories.length === 0) {
  console.log('index.astro - Usando categorías de fallback');
  categories = [
    { id: 1, name: 'Tecnología', slug: 'tech' },
    { id: 2, name: 'Diseño', slug: 'design' }
  ];
}

// Helper function to format dates
function formatDate(dateString: string): string {
  if (!dateString) return '';
  
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  } catch (e) {
    return '';
  }
}

console.log('index.astro - Renderizando con:', {
  posts: posts.length,
  menu: mappedMenuItems.length,
  categorias: categories.length,
  settings: Object.keys(settingsData).length > 0 ? 'Sí' : 'No',
  errores: errorMessages.length
});
---

<BlogLayout 
  title={settingsData?.title || 'Mi Blog'}
  description={settingsData?.description || '... a minimalistic theme focused on readability.'}
  blogTitle={settingsData?.blogTitle || settingsData?.title || 'Read'}
  menuItems={mappedMenuItems}
  settings={settingsData}
>
  <div class="debug-panel">
    <h3>Debug Info - Tenant</h3>
    <pre>{JSON.stringify(tenantInfo, null, 2)}</pre>
    <p><strong>Posts encontrados:</strong> {posts.length}</p>
    <p><strong>Items de menú:</strong> {mappedMenuItems.length}</p>
    <p><strong>Categorías:</strong> {categories.length}</p>
    <p><strong>Settings:</strong> {Object.keys(settingsData).join(', ') || 'No settings'}</p>
    {errorMessages.length > 0 && (
      <div class="errors">
        <h4>Errores:</h4>
        <ul>
          {errorMessages.map(err => <li>{err}</li>)}
        </ul>
        <p><a href="/api-test" target="_blank">Ir a página de diagnóstico</a></p>
      </div>
    )}
  </div>

  <div class="content-wrapper">
    {categories.length > 0 && (
      <section class="categories-section">
        <h2>Categorías</h2>
        <ul class="categories-list">
          {categories.map(category => (
            <li>
              <a href={`/category/${category.slug}`}>{category.name}</a>
            </li>
          ))}
        </ul>
      </section>
    )}

    <div class="posts-container">
      {posts.length > 0 ? (
        <div>
          {posts.map(post => (
            <div style="background: #f0f8ff; padding: 15px; margin: 10px 0; border: 1px solid #d0e3ff; border-radius: 4px;">
              <h3 style="margin-top: 0;">
                <a href={`/blog/${post.slug || post.id}`} style="color: #0066cc; text-decoration: none;">
                  {post.title || 'Sin título'}
                </a>
              </h3>
              
              <div style="color: #666; font-size: 0.9em; margin-bottom: 10px;">
                {post.publishedAt || post.createdAt ? (
                  <span style="margin-right: 15px;">
                    📅 {formatDate(post.publishedAt || post.createdAt)}
                  </span>
                ) : null}
                
                {post.category ? (
                  <span>
                    📁 <a 
                        href={`/category/${post.category.slug}`}
                        style="color: #0066cc; text-decoration: none;"
                      >
                        {post.category.name}
                      </a>
                  </span>
                ) : null}
              </div>
              
              {post.excerpt && (
                <div style="margin: 10px 0; color: #333;">
                  {post.excerpt}
                </div>
              )}
              
              {post.image && (
                <div style="margin: 15px 0;">
                  <a href={`/blog/${post.slug || post.id}`}>
                    <img 
                      src={post.image.startsWith('http') ? post.image : `${import.meta.env.PUBLIC_IMAGE_BASE_URL || ''}/${post.image}`} 
                      alt={post.title} 
                      loading="lazy"
                      style="max-width: 100%; height: auto; border-radius: 4px;"
                    />
                  </a>
                </div>
              )}
              
              <div style="margin-top: 10px;">
                <a 
                  href={`/blog/${post.slug || post.id}`}
                  style="
                    display: inline-block;
                    background: #0066cc;
                    color: white;
                    padding: 5px 12px;
                    border-radius: 4px;
                    text-decoration: none;
                    font-size: 0.9em;
                  "
                >
                  Leer más →
                </a>
              </div>
              
              {/* Sección de depuración */}
              <div style="margin-top: 15px; padding-top: 10px; border-top: 1px dashed #ccc; font-size: 0.8em; color: #666;">
                <div><strong>ID:</strong> {post.id}</div>
                <div><strong>Slug:</strong> {post.slug || 'No definido'}</div>
                <div><strong>Categoría:</strong> {post.category ? post.category.name : 'Ninguna'}</div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div class="no-posts">
          <p>No se encontraron posts. Comienza a crear contenido en tu CMS.</p>
          <p>Se buscaron posts para el subdomain: {tenantInfo?.subdomain || 'default'}</p>
          <a href="/api-test" class="diagnose-link">Ejecutar diagnóstico</a>
        </div>
      )}
    </div>
  </div>
</BlogLayout>

<style>
  .debug-panel {
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    padding: 1rem;
    margin-bottom: 2rem;
    border-radius: 4px;
    font-family: monospace;
    font-size: 0.9rem;
  }
  
  .debug-panel pre {
    background-color: #eee;
    padding: 0.5rem;
    overflow: auto;
    max-height: 200px;
  }
  
  .debug-panel .errors {
    margin-top: 1rem;
    color: #d00;
  }
  
  .debug-panel a {
    color: #0066cc;
    text-decoration: underline;
  }
  
  .content-wrapper {
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .categories-section {
    background-color: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    position: sticky;
    top: 2rem;
    align-self: start;
    height: fit-content;
  }

  .categories-section h2 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.5rem;
  }

  .categories-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .categories-list li {
    margin-bottom: 0.8rem;
  }

  .categories-list a {
    text-decoration: none;
    color: #555;
    transition: color 0.2s;
  }

  .categories-list a:hover {
    color: #0066cc;
  }

  .post {
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid #eee;
  }

  .post-title {
    font-size: 1.8rem;
    margin-bottom: 0.5rem;
  }

  .post-title a {
    color: inherit;
    text-decoration: none;
    transition: color 0.2s;
  }

  .post-title a:hover {
    color: #0066cc;
  }

  .post-meta {
    color: #666;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    display: flex;
    gap: 1rem;
  }

  .post-categories a {
    color: #0066cc;
    text-decoration: none;
  }

  .post-categories a:hover {
    text-decoration: underline;
  }

  .post-image {
    margin: 1.5rem 0;
    border-radius: 8px;
    overflow: hidden;
  }
  
  .post-image img {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 0.3s ease;
  }
  
  .post-image:hover img {
    transform: scale(1.02);
  }
  
  .post-excerpt {
    margin-bottom: 1.5rem;
    color: #444;
    line-height: 1.6;
  }

  .read-more {
    display: inline-block;
    color: #0066cc;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s;
  }

  .read-more:hover {
    color: #004c99;
  }

  .no-posts {
    background-color: #f8f9fa;
    padding: 3rem;
    text-align: center;
    border-radius: 8px;
  }
  
  .diagnose-link {
    display: inline-block;
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background-color: #0066cc;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.2s;
  }
  
  .diagnose-link:hover {
    background-color: #004c99;
  }

  @media (max-width: 768px) {
    .content-wrapper {
      grid-template-columns: 1fr;
    }
    
    .categories-section {
      position: static;
      margin-bottom: 2rem;
    }
  }
</style>
