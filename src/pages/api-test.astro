---
import Layout from '../layouts/Layout.astro';

// No pre-renderizar, para poder hacer consultas en tiempo real
export const prerender = false;

// Estado inicial
let apiResponse = null;
let apiError = null;
let host = '';
let subdomain = '';

// Obtener el host de la petición
host = Astro.request.headers.get('host') || '';
subdomain = host.includes('.') ? host.split('.')[0] : (host.includes(':') ? 'demo' : host);

// Realizar consulta de prueba
try {
  const apiUrl = import.meta.env.PUBLIC_API_URL || 'https://taita-api.onrender.com/api';
  console.log('Probando API:', apiUrl);
  
  // Intentar obtener posts
  const response = await fetch(`${apiUrl}/posts/public`, {
    headers: {
      'Accept': 'application/json',
      'Host': host,
      'X-Taita-Subdomain': subdomain
    }
  });
  
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Error ${response.status}: ${errorText}`);
  }
  
  apiResponse = await response.json();
} catch (error) {
  console.error('Error en la prueba API:', error);
  apiError = error.message;
}
---

<Layout title="Prueba de API">
  <main>
    <h1>Diagnóstico de conexión a la API</h1>
    
    <section class="info-section">
      <h2>Información de la petición</h2>
      <div class="info-grid">
        <div><strong>Host:</strong></div>
        <div>{host}</div>
        
        <div><strong>Subdominio detectado:</strong></div>
        <div>{subdomain}</div>
        
        <div><strong>URL de la API:</strong></div>
        <div>{import.meta.env.PUBLIC_API_URL || 'https://taita-api.onrender.com/api'}</div>
      </div>
    </section>
    
    <section class="response-section">
      <h2>Resultado de la prueba</h2>
      
      {apiError ? (
        <div class="error-box">
          <h3>Error al conectar con la API</h3>
          <p>{apiError}</p>
          
          <div class="troubleshooting">
            <h4>Posibles soluciones:</h4>
            <ol>
              <li>Verifica que la API esté en funcionamiento</li>
              <li>Comprueba la configuración de CORS en el servidor</li>
              <li>Asegúrate de que Cloudflare no esté bloqueando las peticiones</li>
              <li>Revisa los headers de la petición</li>
            </ol>
          </div>
        </div>
      ) : (
        <div class="success-box">
          <h3>Conexión exitosa</h3>
          <p>Se han recibido {Array.isArray(apiResponse) ? apiResponse.length : 'datos'} desde la API.</p>
          
          <details>
            <summary>Ver respuesta completa</summary>
            <pre>{JSON.stringify(apiResponse, null, 2)}</pre>
          </details>
        </div>
      )}
    </section>
    
    <section class="test-section">
      <h2>Probar otras rutas</h2>
      <div class="test-buttons">
        <button id="btn-posts">Posts</button>
        <button id="btn-categories">Categorías</button>
        <button id="btn-menu">Menú</button>
        <button id="btn-settings">Configuración</button>
      </div>
      
      <div id="test-result" class="test-result">
        <p>Haz clic en un botón para probar la ruta</p>
      </div>
    </section>
  </main>
</Layout>

<script>
  // Funciones para probar las rutas de la API
  const testEndpoint = async (endpoint) => {
    const result = document.getElementById('test-result');
    result.innerHTML = '<p>Cargando...</p>';
    
    try {
      const host = window.location.host;
      const subdomain = host.includes('.') ? host.split('.')[0] : (host.includes(':') ? 'demo' : host);
      const apiUrl = import.meta.env.PUBLIC_API_URL || 'https://taita-api.onrender.com/api';
      
      const response = await fetch(`${apiUrl}${endpoint}`, {
        headers: {
          'Accept': 'application/json',
          'Host': host,
          'X-Taita-Subdomain': subdomain
        }
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Error ${response.status}: ${errorText}`);
      }
      
      const data = await response.json();
      result.innerHTML = `
        <div class="success-test">
          <h3>Éxito al consultar ${endpoint}</h3>
          <pre>${JSON.stringify(data, null, 2)}</pre>
        </div>
      `;
    } catch (error) {
      result.innerHTML = `
        <div class="error-test">
          <h3>Error al consultar ${endpoint}</h3>
          <p>${error.message}</p>
        </div>
      `;
    }
  };
  
  // Agregar listeners a los botones
  document.getElementById('btn-posts').addEventListener('click', () => testEndpoint('/posts/public'));
  document.getElementById('btn-categories').addEventListener('click', () => testEndpoint('/categories/public'));
  document.getElementById('btn-menu').addEventListener('click', () => testEndpoint('/menu/public'));
  document.getElementById('btn-settings').addEventListener('click', () => testEndpoint('/settings/public'));
</script>

<style>
  main {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  h1 {
    font-size: 2rem;
    margin-bottom: 2rem;
  }
  
  section {
    margin-bottom: 2rem;
    padding: 1.5rem;
    border-radius: 8px;
    background-color: #f8f9fa;
  }
  
  .info-grid {
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: 0.5rem;
  }
  
  .error-box {
    padding: 1rem;
    background-color: #fee;
    border-left: 4px solid #d00;
    border-radius: 4px;
  }
  
  .success-box {
    padding: 1rem;
    background-color: #efe;
    border-left: 4px solid #090;
    border-radius: 4px;
  }
  
  .test-buttons {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  
  button {
    padding: 0.5rem 1rem;
    background-color: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #0055aa;
  }
  
  pre {
    background-color: #f0f0f0;
    padding: 1rem;
    overflow-x: auto;
    border-radius: 4px;
    font-size: 0.9rem;
  }
  
  .test-result {
    margin-top: 1rem;
    min-height: 100px;
  }
  
  .error-test {
    padding: 1rem;
    background-color: #fee;
    border-radius: 4px;
  }
  
  .success-test {
    padding: 1rem;
    background-color: #efe;
    border-radius: 4px;
  }
  
  details {
    margin-top: 1rem;
  }
  
  summary {
    cursor: pointer;
    color: #0066cc;
  }
  
  .troubleshooting {
    margin-top: 1rem;
    padding: 1rem;
    background-color: #f8f8f8;
    border-radius: 4px;
  }
  
  ol {
    margin-left: 1.5rem;
  }
</style>