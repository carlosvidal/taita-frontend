---
import BlogLayout from '../../layouts/BlogLayout.astro';
import { getTenantInfo, fetchTenantData } from '../../utils/tenant.js';

export const prerender = false;

// Get tenant information from request
const tenantInfo = getTenantInfo(Astro.request);
const { slug } = Astro.params;
console.log('category-slug.astro - Parámetros:', { slug });
console.log('category-slug.astro - Tenant info:', tenantInfo);

// Fetch data using tenant information
let posts = [];
let menuItems = [];
let settings = {};
let category = null;
let errorMessages = [];

try {
  // Fetch all necessary data in parallel
  console.log('category-slug.astro - Iniciando fetch de datos para categoría:', slug);
  const [postsData, menuData, settingsData, categoriesData] = await Promise.all([
    fetchTenantData(`/posts/public?categorySlug=${slug}`, tenantInfo),
    fetchTenantData('/menu/public', tenantInfo),
    fetchTenantData('/settings/public', tenantInfo),
    fetchTenantData('/categories/public', tenantInfo)
  ]);
  
  console.log('category-slug.astro - Respuesta de posts:', typeof postsData, Array.isArray(postsData) ? postsData.length : 'no es array');
  console.log('category-slug.astro - Respuesta de menú:', typeof menuData, Array.isArray(menuData) ? menuData.length : 'no es array');
  console.log('category-slug.astro - Respuesta de settings:', typeof settingsData);
  console.log('category-slug.astro - Respuesta de categorías:', typeof categoriesData, Array.isArray(categoriesData) ? categoriesData.length : 'no es array');
  
  // Process posts
  if (postsData && Array.isArray(postsData)) {
    posts = postsData;
    console.log('category-slug.astro - Posts procesados:', posts.length);
  } else {
    errorMessages.push('No se pudieron obtener los posts');
    console.log('category-slug.astro - No se pudieron obtener los posts para la categoría:', slug);
  }
  
  // Process menu data
  if (menuData && Array.isArray(menuData)) {
    menuItems = menuData.map(item => ({
      label: item.label,
      url: item.url,
      active: item.url === `/category/${slug}`
    }));
    console.log('category-slug.astro - Menú procesado:', menuItems.length);
  } else {
    errorMessages.push('No se pudo obtener el menú');
    console.log('category-slug.astro - No se pudo obtener el menú');
  }
  
  // Process settings
  if (settingsData) {
    settings = settingsData;
    console.log('category-slug.astro - Settings procesados:', Object.keys(settings).join(', '));
  } else {
    errorMessages.push('No se pudieron obtener los settings');
    console.log('category-slug.astro - No se pudieron obtener los settings');
  }
  
  // Find the current category from categories list
  if (categoriesData) {
    if (Array.isArray(categoriesData)) {
      category = categoriesData.find(cat => cat.slug === slug);
      console.log('category-slug.astro - Buscando categoría en array de categorías:', category ? 'encontrada' : 'no encontrada');
    } else if (categoriesData.categories && Array.isArray(categoriesData.categories)) {
      category = categoriesData.categories.find(cat => cat.slug === slug);
      console.log('category-slug.astro - Buscando categoría en categoriesData.categories:', category ? 'encontrada' : 'no encontrada');
    }
  }
  
  if (!category) {
    errorMessages.push('No se encontró la categoría con el slug proporcionado');
    console.log('category-slug.astro - No se encontró la categoría con slug:', slug);
  }
} catch (error) {
  console.error('category-slug.astro - Error al obtener datos:', error);
  errorMessages.push(`Error: ${error.message}`);
}

// Handle 404 - category not found
if (!category) {
  // Try to extract category name from slug for a fallback
  const categoryName = slug
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
    
  category = {
    name: categoryName,
    slug: slug
  };
  
  console.log('category-slug.astro - Usando categoría de fallback:', category);
}

// Helper function to format dates
function formatDate(dateString) {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
---

<BlogLayout 
  title={`${category.name} - ${settings.title || 'Blog'}`}
  description={`Artículos en la categoría ${category.name}`}
  menuItems={menuItems}
  settings={settings}
>
  <div class="debug-panel">
    <h3>Debug Info - Categoría</h3>
    <pre>{JSON.stringify({
      tenant: tenantInfo,
      categorySlug: slug,
      categoryName: category?.name,
      postsCount: posts.length,
      hasMenu: menuItems.length > 0,
      hasSettings: Object.keys(settings).length > 0,
      errors: errorMessages
    }, null, 2)}</pre>
  </div>

  <div class="category-page">
    <header class="category-header">
      <h1>{category.name}</h1>
      <p class="category-description">
        {category.description || `Artículos en la categoría ${category.name}`}
      </p>
    </header>
    
    {posts.length > 0 ? (
      <div class="posts-grid">
        {posts.map(post => (
          <article class="post-card">
            {post.image && (
              <div class="post-image">
                <a href={`/blog/${post.slug || post.id}`}>
                  <img src={`${import.meta.env.PUBLIC_IMAGE_BASE_URL}/${post.image}`} 
                       alt={post.title} 
                       loading="lazy" />
                </a>
              </div>
            )}
            <div class="post-content">
              <h2 class="post-title">
                <a href={`/blog/${post.slug || post.id}`}>{post.title}</a>
              </h2>
              <div class="post-meta">
                <time datetime={post.publishedAt}>{formatDate(post.publishedAt)}</time>
              </div>
              <p class="post-excerpt">
                {post.excerpt || post.content.substring(0, 150)}...
              </p>
              <a href={`/blog/${post.slug || post.id}`} class="read-more">
                Leer más →
              </a>
            </div>
          </article>
        ))}
      </div>
    ) : (
      <div class="no-posts">
        <p>No hay artículos en esta categoría.</p>
        <p>Se buscaron posts para la categoría: {slug} en el subdomain: {tenantInfo.subdomain}</p>
      </div>
    )}
  </div>
</BlogLayout>

<style>
  .debug-panel {
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    padding: 1rem;
    margin-bottom: 2rem;
    border-radius: 4px;
    font-family: monospace;
    font-size: 0.9rem;
  }
  
  .debug-panel pre {
    background-color: #eee;
    padding: 0.5rem;
    overflow: auto;
    max-height: 200px;
  }
  
  .category-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }
  
  .category-header {
    text-align: center;
    margin-bottom: 3rem;
  }
  
  h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }
  
  .category-description {
    color: #666;
    max-width: 600px;
    margin: 0 auto;
  }
  
  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }
  
  .post-card {
    border: 1px solid #eee;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s, box-shadow 0.2s;
    background: white;
  }
  
  .post-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0,0,0,0.1);
  }
  
  .post-image img {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }
  
  .post-content {
    padding: 1.5rem;
  }
  
  .post-title {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
  }
  
  .post-title a {
    color: inherit;
    text-decoration: none;
  }
  
  .post-title a:hover {
    color: #0066cc;
  }
  
  .post-meta {
    color: #666;
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }
  
  .post-excerpt {
    color: #555;
    margin-bottom: 1rem;
    line-height: 1.5;
  }
  
  .read-more {
    display: inline-block;
    color: #0066cc;
    text-decoration: none;
    font-weight: 500;
  }
  
  .no-posts {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem;
    background: #f9f9f9;
    border-radius: 8px;
  }
  
  @media (max-width: 768px) {
    .posts-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
