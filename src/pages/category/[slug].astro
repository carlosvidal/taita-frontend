---
import BlogLayout from '../../layouts/BlogLayout.astro';

// Definir interfaces
interface Post {
  id: number;
  title: string;
  content: string;
  excerpt?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt: string;
  image?: string;
  category?: {
    id: number;
    name: string;
    slug: string;
  };
  author?: {
    id: number;
    name: string;
  };
}

interface Category {
  id: number;
  name: string;
  slug: string;
}

interface MenuItem {
  id: number;
  label: string;
  url: string;
  order: number;
}

interface MenuItemForLayout {
  label: string;
  url: string;
  active: boolean;
}

interface Settings {
  title: string;
  description: string;
}

export const prerender = false;

// Generar rutas estáticas para cada categoría
export function getStaticPaths() {
  // Usar datos estáticos de fallback para evitar problemas de conexión con la API durante el build
  // Esto garantiza que el sitio se pueda construir sin depender de la API
  const fallbackCategories: Category[] = [
    { id: 1, name: 'General', slug: 'general' },
    { id: 2, name: 'Tecnología', slug: 'tecnologia' },
    { id: 3, name: 'Viajes', slug: 'viajes' }
  ];
  
  return fallbackCategories.map((category) => ({
    params: { slug: category.slug },
    props: { category }
  }));
}

// Datos de fallback para el build
const fallbackMenuData: MenuItem[] = [
  { id: 1, label: 'Home', url: '/', order: 1 },
  { id: 2, label: 'Blog', url: '/blog', order: 2 },
  { id: 3, label: 'Categories', url: '/categories', order: 3 },
  { id: 4, label: 'About', url: '/about', order: 4 }
];

const fallbackSettingsData: Settings = {
  title: 'Taita Blog',
  description: 'A simple blog built with Astro'
};

// Datos de posts de fallback para cada categoría
const fallbackPostsByCategory: Record<string, Post[]> = {
  'general': [
    { 
      id: 1, 
      title: 'Primer post de ejemplo', 
      content: 'Este es el contenido del primer post de ejemplo.', 
      publishedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      category: { id: 1, name: 'General', slug: 'general' },
      author: { id: 1, name: 'Admin' },
      image: 'https://via.placeholder.com/800x400'
    },
    { 
      id: 4, 
      title: 'Cuarto post', 
      content: 'Contenido del cuarto post.', 
      publishedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      category: { id: 1, name: 'General', slug: 'general' },
      author: { id: 1, name: 'Admin' },
      image: 'https://via.placeholder.com/800x400'
    }
  ],
  'tecnologia': [
    { 
      id: 2, 
      title: 'Segundo post', 
      content: 'Contenido del segundo post.', 
      publishedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      category: { id: 2, name: 'Tecnología', slug: 'tecnologia' },
      author: { id: 1, name: 'Admin' },
      image: 'https://via.placeholder.com/800x400'
    },
    { 
      id: 5, 
      title: 'Quinto post', 
      content: 'Contenido del quinto post.', 
      publishedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      category: { id: 2, name: 'Tecnología', slug: 'tecnologia' },
      author: { id: 1, name: 'Admin' },
      image: 'https://via.placeholder.com/800x400'
    }
  ],
  'viajes': [
    { 
      id: 3, 
      title: 'Tercer post', 
      content: 'Contenido del tercer post.', 
      publishedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      category: { id: 3, name: 'Viajes', slug: 'viajes' },
      author: { id: 1, name: 'Admin' },
      image: 'https://via.placeholder.com/800x400'
    }
  ]
};

// Usar los datos de la categoría proporcionados por getStaticPaths
const { slug } = Astro.params;
const categoryData = Astro.props.category;
const posts = fallbackPostsByCategory[slug || ''] || [];

// Usar datos estáticos de fallback para menú y configuración durante el build
const menuData = fallbackMenuData;
const settingsData = fallbackSettingsData;

// Procesar elementos del menú para el layout
const mappedMenuItems: MenuItemForLayout[] = menuData.map((item) => ({
  label: item.label,
  url: item.url,
  active: item.url === `/category/${slug}`
}));

// Función para formatear fechas
function formatDate(dateString: string | undefined): string {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
---

<BlogLayout title={`Categoría: ${categoryData.name}`} menuItems={mappedMenuItems} settings={settingsData}>
  <div class="category-page">
    <header>
      <h1>Categoría: {categoryData.name}</h1>
      <p>Artículos en esta categoría</p>
    </header>
    
    <div class="posts-grid">
      {posts.length > 0 ? (
        posts.map((post) => (
          <article class="post-card">
            {post.image && (
              <div class="post-image">
                <a href={`/blog/${post.id}`}>
                  <img src={post.image} alt={post.title} />
                </a>
              </div>
            )}
            <div class="post-content">
              <h2><a href={`/blog/${post.id}`}>{post.title}</a></h2>
              <div class="post-meta">
                <time datetime={post.publishedAt}>{formatDate(post.publishedAt)}</time>
              </div>
              <p class="excerpt">{post.excerpt || post.content.substring(0, 150)}...</p>
              <a href={`/blog/${post.id}`} class="read-more">Leer más</a>
            </div>
          </article>
        ))
      ) : (
        <div class="no-posts">
          <p>No hay artículos en esta categoría.</p>
        </div>
      )}
    </div>
  </div>
</BlogLayout>

<style>
  .category-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }
  
  header {
    text-align: center;
    margin-bottom: 3rem;
  }
  
  h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }
  
  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }
  
  .post-card {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
    background: white;
  }
  
  .post-card:hover {
    transform: translateY(-5px);
  }
  
  .post-image img {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }
  
  .post-content {
    padding: 1.5rem;
  }
  
  .post-content h2 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
  }
  
  .post-content h2 a {
    color: #333;
    text-decoration: none;
  }
  
  .post-content h2 a:hover {
    color: #0066cc;
  }
  
  .post-meta {
    color: #666;
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }
  
  .excerpt {
    color: #555;
    margin-bottom: 1rem;
    line-height: 1.5;
  }
  
  .read-more {
    display: inline-block;
    color: #0066cc;
    text-decoration: none;
    font-weight: 500;
  }
  
  .read-more:hover {
    text-decoration: underline;
  }
  
  .no-posts {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem;
    background: #f9f9f9;
    border-radius: 8px;
  }
  
  @media (max-width: 768px) {
    .posts-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
