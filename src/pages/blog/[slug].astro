---
import BlogLayout from '../../layouts/BlogLayout.astro';
import { getTenantInfo, fetchTenantData } from '../../utils/tenant.js';
import { api } from '../../utils/api.js';

export const prerender = false;

// Get tenant information from request
const tenantInfo = getTenantInfo(Astro.request);
const { slug } = Astro.params;
console.log('slug.astro - Parámetros de URL:', { slug });
console.log('slug.astro - Tenant info:', tenantInfo);

// Fetch data using tenant information
let post = null;
let menuItems = [];
let settings = {};
let comments = [];
let errorMessages = [];

try {
  // Configurar cliente API con la información del tenant
  const apiClient = new api.constructor();
  
  // Sobreescribir el método getHostInfo para usar la información del tenant
  apiClient.getHostInfo = () => ({
    host: tenantInfo.host,
    subdomain: tenantInfo.subdomain
  });
  
  // Fetch post, menu, settings in parallel
  console.log('slug.astro - Iniciando fetch de datos para post:', slug);
  const [postData, menuData, settingsData] = await Promise.all([
    apiClient.fetch(`/posts/public/slug/${slug}`),
    apiClient.fetch('/menu/public'),
    apiClient.fetch('/settings/public')
  ]);
  
  console.log('slug.astro - Respuesta del post:', typeof postData, Array.isArray(postData) ? postData.length : 'no es array');
  console.log('slug.astro - Respuesta del menú:', typeof menuData, Array.isArray(menuData) ? menuData.length : 'no es array');
  console.log('slug.astro - Respuesta de configuración:', typeof settingsData);
  
  // Process post data - it might come as an array with one item
  if (postData) {
    if (Array.isArray(postData) && postData.length > 0) {
      post = postData[0];
      console.log('slug.astro - Post encontrado en array:', post.id, post.title);
      
      // Intentar cargar comentarios si tenemos el ID del post
      if (post.id) {
        try {
          const commentsResponse = await fetch(`${import.meta.env.PUBLIC_API_URL || 'https://taita-api.onrender.com/api'}/comments?postId=${post.id}&status=APPROVED`, {
            headers: {
              'Accept': 'application/json',
              'Host': tenantInfo.host,
              'X-Taita-Subdomain': tenantInfo.subdomain
            }
          });
          
          if (commentsResponse.ok) {
            comments = await commentsResponse.json();
            console.log(`slug.astro - Obtenidos ${comments.length} comentarios`);
          }
        } catch (commentsError) {
          console.error('slug.astro - Error al obtener comentarios:', commentsError);
        }
      }
    } else if (typeof postData === 'object') {
      post = postData;
      console.log('slug.astro - Post encontrado como objeto:', post.id, post.title);
    } else {
      errorMessages.push('El formato de respuesta del post no es reconocido');
      console.log('slug.astro - Formato de respuesta no reconocido:', postData);
    }
  } else {
    errorMessages.push('No se encontró el post');
    console.log('slug.astro - No se encontró el post');
  }
  
  // Process menu data
  if (menuData && Array.isArray(menuData)) {
    menuItems = menuData.map(item => ({
      label: item.label,
      url: item.url,
      active: item.url === `/blog/${slug}`
    }));
    console.log('slug.astro - Menú procesado:', menuItems.length);
  } else {
    errorMessages.push('No se pudo obtener el menú');
    console.log('slug.astro - No se pudo obtener el menú:', menuData);
  }
  
  // Process settings
  if (settingsData) {
    settings = settingsData;
    console.log('slug.astro - Settings procesados:', Object.keys(settings).join(', '));
  } else {
    errorMessages.push('No se pudieron obtener los settings');
    console.log('slug.astro - No se pudieron obtener los settings');
  }
} catch (error) {
  console.error('slug.astro - Error al obtener datos:', error);
  errorMessages.push(`Error: ${error.message}`);
}

// Handle 404 - post not found
if (!post) {
  // Try with legacy method before giving up
  try {
    console.log('slug.astro - Intentando buscar post con método legacy');
    const legacyPostData = await fetchTenantData(`/posts/public/slug/${slug}`, tenantInfo);
    
    if (legacyPostData && Array.isArray(legacyPostData) && legacyPostData.length > 0) {
      post = legacyPostData[0];
      console.log('slug.astro - Post encontrado con método legacy:', post.id, post.title);
    } else {
      console.log('slug.astro - No se encontró post con método legacy');
    }
  } catch (error) {
    console.error('slug.astro - Error con método legacy:', error);
    errorMessages.push(`Error con método legacy: ${error.message}`);
  }
}

// If still no post, try redirect
if (!post) {
  console.log('slug.astro - Redirigiendo a 404');
  return Astro.redirect('/404');
}

// Helper function to format dates
function formatDate(dateString) {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

const formattedDate = formatDate(post.publishedAt || post.createdAt);
console.log('slug.astro - Post procesado correctamente. Renderizando.');
---

<BlogLayout 
  title={post.title} 
  description={post.excerpt || post.content.substring(0, 155)}
  menuItems={menuItems}
  settings={settings}
>
  <div class="debug-panel">
    <h3>Debug Info - Post [slug].astro</h3>
    <pre>{JSON.stringify({
      tenant: tenantInfo,
      slug,
      postId: post?.id,
      postTitle: post?.title,
      hasMenu: menuItems.length > 0,
      hasSettings: Object.keys(settings).length > 0,
      errors: errorMessages
    }, null, 2)}</pre>
  </div>

  <article class="post">
    <header class="post-header">
      <h1>{post.title}</h1>
      <div class="post-meta">
        <time datetime={post.publishedAt || post.createdAt}>{formattedDate}</time>
        {post.category && (
          <span class="category">
            <a href={`/category/${post.category.slug}`}>{post.category.name}</a>
          </span>
        )}
      </div>
    </header>
    
    {post.image && (
      <div class="featured-image">
        <img 
          src={post.image.startsWith('http') ? post.image : `${import.meta.env.PUBLIC_IMAGE_BASE_URL || ''}/${post.image}`} 
          alt={post.title} 
        />
      </div>
    )}
    
    <div class="content" set:html={post.content} />
    
    {post.author && (
      <div class="author-bio">
        <h3>Sobre el autor</h3>
        <div class="author-info">
          {post.author.picture && (
            <img 
              src={post.author.picture.startsWith('http') ? post.author.picture : `${import.meta.env.PUBLIC_IMAGE_BASE_URL || ''}/${post.author.picture}`} 
              alt={post.author.name} 
              class="author-avatar" 
            />
          )}
          <div>
            <h4>{post.author.name}</h4>
            {post.author.bio && <p>{post.author.bio}</p>}
          </div>
        </div>
      </div>
    )}
    
    <!-- Sección de comentarios -->
    {comments.length > 0 && (
      <section class="comments-section">
        <h2>Comentarios</h2>
        <ul class="comments-list">
          {comments.map(comment => (
            <li class="comment-item">
              <div class="comment-author">{comment.authorName}</div>
              <div class="comment-content">{comment.content}</div>
              <time class="comment-date" datetime={comment.createdAt}>
                {formatDate(comment.createdAt)}
              </time>
            </li>
          ))}
        </ul>
      </section>
    )}
    
    <!-- Formulario de comentarios -->
    <section class="comment-form-section">
      <h2>Deja un comentario</h2>
      <comment-form 
        api-base={import.meta.env.PUBLIC_API_URL || 'https://taita-api.onrender.com/api'} 
        post-id={post.id.toString()}
      ></comment-form>
    </section>
  </article>
</BlogLayout>

<script type="module" src="/src/components/CommentForm.js"></script>

<style>
  .debug-panel {
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    padding: 1rem;
    margin-bottom: 2rem;
    border-radius: 4px;
    font-family: monospace;
    font-size: 0.9rem;
  }
  
  .debug-panel pre {
    background-color: #eee;
    padding: 0.5rem;
    overflow: auto;
    max-height: 200px;
  }

  .post {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }
  
  .post-header {
    margin-bottom: 2rem;
  }
  
  h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }
  
  .post-meta {
    display: flex;
    gap: 1rem;
    color: #666;
    font-size: 0.9rem;
  }
  
  .category a {
    color: #0066cc;
    text-decoration: none;
  }
  
  .category a:hover {
    text-decoration: underline;
  }
  
  .featured-image {
    margin: 2rem 0;
    border-radius: 8px;
    overflow: hidden;
  }
  
  .featured-image img {
    width: 100%;
    height: auto;
    display: block;
  }
  
  .content {
    line-height: 1.7;
    font-size: 1.1rem;
  }
  
  .content h2 {
    font-size: 1.8rem;
    margin: 2rem 0 1rem;
  }
  
  .content h3 {
    font-size: 1.5rem;
    margin: 1.8rem 0 0.8rem;
  }
  
  .content p {
    margin-bottom: 1.5rem;
  }
  
  .content img {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
    margin: 2rem 0;
  }
  
  .content blockquote {
    border-left: 4px solid #0066cc;
    padding-left: 1rem;
    margin-left: 0;
    color: #555;
    font-style: italic;
  }
  
  .author-bio {
    margin-top: 3rem;
    padding: 1.5rem;
    background-color: #f8f9fa;
    border-radius: 8px;
  }
  
  .author-info {
    display: flex;
    gap: 1rem;
    align-items: center;
  }
  
  .author-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
  }
  
  /* Estilos para comentarios */
  .comments-section {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .comments-list {
    list-style: none;
    padding: 0;
  }
  
  .comment-item {
    margin-bottom: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid #eee;
  }
  
  .comment-author {
    font-weight: bold;
    margin-bottom: 0.5rem;
  }
  
  .comment-content {
    line-height: 1.6;
    margin-bottom: 0.5rem;
  }
  
  .comment-date {
    color: #666;
    font-size: 0.9rem;
  }
  
  .comment-form-section {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  @media (max-width: 768px) {
    h1 {
      font-size: 2rem;
    }
    
    .author-info {
      flex-direction: column;
      text-align: center;
    }
  }
</style>
