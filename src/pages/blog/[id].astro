---
import BlogLayout from '../../layouts/BlogLayout.astro';

// Definir la interfaz para el tipo Post
interface Post {
  id: number;
  title: string;
  content: string;
  excerpt?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt: string;
  image?: string;
  category?: {
    id: number;
    name: string;
    slug: string;
  };
  author?: {
    id: number;
    name: string;
    email?: string;
    bio?: string;
    avatar?: string;
  };
}

interface MenuItem {
  id: number;
  label: string;
  url: string;
  order: number;
}

interface MenuItemForLayout {
  label: string;
  url: string;
  active: boolean;
}

interface Settings {
  title: string;
  description: string;
}

export const prerender = true;

// Generar rutas estáticas para cada post
export function getStaticPaths() {
  // Usar datos estáticos de fallback para evitar problemas de conexión con la API durante el build
  // Esto garantiza que el sitio se pueda construir sin depender de la API
  const fallbackPosts: Post[] = [
    { 
      id: 1, 
      title: 'Primer post de ejemplo', 
      content: 'Este es el contenido del primer post de ejemplo.', 
      publishedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      category: { id: 1, name: 'General', slug: 'general' },
      author: { id: 1, name: 'Admin' },
      image: 'https://via.placeholder.com/800x400'
    },
    { 
      id: 2, 
      title: 'Segundo post', 
      content: 'Contenido del segundo post.', 
      publishedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      category: { id: 2, name: 'Tecnología', slug: 'tecnologia' },
      author: { id: 1, name: 'Admin' },
      image: 'https://via.placeholder.com/800x400'
    },
    { 
      id: 3, 
      title: 'Tercer post', 
      content: 'Contenido del tercer post.', 
      publishedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      category: { id: 3, name: 'Viajes', slug: 'viajes' },
      author: { id: 1, name: 'Admin' },
      image: 'https://via.placeholder.com/800x400'
    },
    { 
      id: 4, 
      title: 'Cuarto post', 
      content: 'Contenido del cuarto post.', 
      publishedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      category: { id: 1, name: 'General', slug: 'general' },
      author: { id: 1, name: 'Admin' },
      image: 'https://via.placeholder.com/800x400'
    },
    { 
      id: 5, 
      title: 'Quinto post', 
      content: 'Contenido del quinto post.', 
      publishedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      category: { id: 2, name: 'Tecnología', slug: 'tecnologia' },
      author: { id: 1, name: 'Admin' },
      image: 'https://via.placeholder.com/800x400'
    }
  ];
  
  return fallbackPosts.map((post) => ({
    params: { id: post.id.toString() },
    props: { post }
  }));
}

// Datos de fallback para el build
const fallbackMenuData: MenuItem[] = [
  { id: 1, label: 'Home', url: '/', order: 1 },
  { id: 2, label: 'Blog', url: '/blog', order: 2 },
  { id: 3, label: 'Categories', url: '/categories', order: 3 },
  { id: 4, label: 'About', url: '/about', order: 4 }
];

const fallbackSettingsData: Settings = {
  title: 'Taita Blog',
  description: 'A simple blog built with Astro'
};

// Usar los datos del post proporcionados por getStaticPaths
const { id } = Astro.params;
const post = Astro.props.post;

// Usar datos estáticos de fallback para menú y configuración durante el build
const menuData = fallbackMenuData;
const settingsData = fallbackSettingsData;

// Procesar elementos del menú para el layout
const mappedMenuItems: MenuItemForLayout[] = menuData.map((item) => ({
  label: item.label,
  url: item.url,
  active: item.url === `/blog/${id}`
}));

// Función para formatear fechas
function formatDate(dateString: string | undefined): string {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

const formattedDate = formatDate(post.publishedAt);
---

<BlogLayout title={post.title} menuItems={mappedMenuItems} settings={settingsData}>
  <article class="post-content">
    <header>
      <h1>{post.title}</h1>
      <div class="post-meta">
        <time datetime={post.publishedAt}>{formattedDate}</time>
        {post.category && (
          <span class="category">
            <a href={`/category/${post.category.slug}`}>{post.category.name}</a>
          </span>
        )}
      </div>
    </header>
    
    {post.image && (
      <div class="featured-image">
        <img src={post.image} alt={post.title} />
      </div>
    )}
    
    <div class="content">
      {post.content}
    </div>
    
    {post.author && (
      <div class="author-bio">
        <h3>Sobre el autor</h3>
        <div class="author-info">
          {post.author.avatar && (
            <img src={post.author.avatar} alt={post.author.name} class="author-avatar" />
          )}
          <div>
            <h4>{post.author.name}</h4>
            {post.author.bio && <p>{post.author.bio}</p>}
          </div>
        </div>
      </div>
    )}
  </article>
</BlogLayout>

<style>
  .post-content {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }
  
  header {
    margin-bottom: 2rem;
  }
  
  h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }
  
  .post-meta {
    display: flex;
    gap: 1rem;
    color: #666;
    font-size: 0.9rem;
  }
  
  .category a {
    color: #0066cc;
    text-decoration: none;
  }
  
  .category a:hover {
    text-decoration: underline;
  }
  
  .featured-image {
    margin: 2rem 0;
  }
  
  .featured-image img {
    width: 100%;
    height: auto;
    border-radius: 8px;
  }
  
  .content {
    line-height: 1.6;
    font-size: 1.1rem;
  }
  
  .author-bio {
    margin-top: 3rem;
    padding: 1.5rem;
    background-color: #f9f9f9;
    border-radius: 8px;
  }
  
  .author-info {
    display: flex;
    gap: 1rem;
    align-items: center;
  }
  
  .author-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
  }
</style>
