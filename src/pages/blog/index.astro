---
import BlogLayout from '../../layouts/BlogLayout.astro';

// Configuración para renderizado en el servidor
export const prerender = false;

// Definir la interfaz para el tipo Post
interface Post {
  id: number;
  title: string;
  content: string;
  excerpt?: string;
  publishedAt: string;
  image?: string;
}

// Usar datos estáticos de fallback para evitar problemas de conexión con la API durante el build
const fallbackPosts: Post[] = [
  { id: 1, title: 'Primer post de ejemplo', content: 'Este es el contenido del primer post de ejemplo.', publishedAt: new Date().toISOString() },
  { id: 2, title: 'Segundo post', content: 'Contenido del segundo post.', publishedAt: new Date().toISOString() },
  { id: 3, title: 'Tercer post', content: 'Contenido del tercer post.', publishedAt: new Date().toISOString() },
  { id: 4, title: 'Cuarto post', content: 'Contenido del cuarto post.', publishedAt: new Date().toISOString() },
  { id: 5, title: 'Quinto post', content: 'Contenido del quinto post.', publishedAt: new Date().toISOString() }
];

// API endpoint definitions
const API_BASE = import.meta.env.API_URL || 'https://taita-api.onrender.com/api';
const POSTS_API = `${API_BASE}/posts/public`;

// Obtener datos de la API
let posts = fallbackPosts;
try {
  const response = await fetch(POSTS_API, {
    headers: {
      'Accept': 'application/json'
    }
  });
  
  if (response.ok) {
    const data = await response.json();
    if (Array.isArray(data) && data.length > 0) {
      posts = data;
    }
  }
} catch (error) {
  console.error('Error fetching posts:', error);
}
---
<BlogLayout title="Blog">
  <h1>Writings</h1>
  {posts.map((post: Post) => (
    <article>
      <h2><a href={`/blog/${post.id}`}>{post.title}</a></h2>
      <time datetime={post.publishedAt}>{new Date(post.publishedAt).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</time>
      <p style="color: var(--text-secondary);">{post.excerpt || post.content.substring(0, 180)}...</p>
    </article>
  ))}
</BlogLayout>